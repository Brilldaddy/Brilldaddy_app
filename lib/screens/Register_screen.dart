import 'package:brilldaddy/screens/login_screen.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'dart:async';
import 'package:dio/dio.dart';

class RegisterScreen extends StatefulWidget {
  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  bool isSubmitting = false;
  bool isTermsAccepted = false;
  String username = '';
  String email = '';
  String phone = '';
  String successMessage = '';
  String errorMessage = '';

  Future<Position> _fetchLocation() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw Exception("Location services are disabled.");
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception("Location permissions are denied.");
      }
    }

    return await Geolocator.getCurrentPosition();
  }

  Future<void> _handleSubmit() async {
    if (!_formKey.currentState!.validate() || !isTermsAccepted) return;

    setState(() {
      isSubmitting = true;
      successMessage = '';
      errorMessage = '';
    });

    try {
      Position location = await _fetchLocation();
      var response = await Dio().post(
        'https://api.brilldaddy.com/api/user/register',
        data: {
          'username': username,
          'email': email,
          'phone': phone,
          'location': {
            'latitude': location.latitude,
            'longitude': location.longitude,
          }
        },
        options: Options(validateStatus: (status) => status! < 500),
      );

      print('Response status: ${response.statusCode}');
      print('Response data: ${response.data}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        setState(() {
          successMessage = 'Registration successful!';
        });
        Future.delayed(Duration(seconds: 2), () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => LoginScreen()),
          );
        });
      } else if (response.statusCode == 409) {
        setState(() {
          errorMessage = 'User already exists. Please log in.';
        });
      } else {
        setState(() {
          errorMessage =
              'Registration failed: ${response.data['message'] ?? 'Unknown error'}';
        });
      }
    } on DioException catch (dioError) {
      print('DioError: ${dioError.message}');
      setState(() {
        errorMessage = 'Network error: ${dioError.message}';
      });
    } catch (error) {
      print('Error: $error');
      setState(() {
        errorMessage = 'An unexpected error occurred.';
      });
    } finally {
      setState(() {
        isSubmitting = false;
      });
    }
  }

  void _showTermsAndConditions(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            "Terms and Conditions",
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          content: SingleChildScrollView(
            child: Text(
              "TERMS AND CONDITIONS\n\n"
              "1. TERMS:\n"
              "Welcome to www.brilldaddy.com. This document is an electronic record in terms of the Information Technology Act, 2000 and rules made thereunder as applicable and the amended provisions pertaining to electronic records in various statutes as amended by the Information Technology Act, 2000. This electronic record is generated by a computer system and does not require any physical or digital signatures.\n"
              "This Agreement for the Terms and Conditions (hereinafter referred to as ‘Agreement’) of the Company’s website/mobile application (collectively referred to as “Systems”) describes certain terms and conditions to access and use the Systems of the Company and wherever the context so requires \"You\" or \"User\" shall mean any natural or legal person who has agreed to become a buyer on Systems by providing data while registering on our Systems as Registered User. The term \"Company”, “Brilldaddy”, We\", \"Us\", \"Our\" shall mean Brilldaddy E-commerce Private Limited and its affiliates. Please also review Our Privacy Policy, which governs the collection, use, and protection of Your personal data (available on Our website).\n\n"
              "2. ACCEPTANCE OF TERMS OF USE:\n"
              "PLEASE READ THESE TERMS AND CONDITIONS CAREFULLY. BY ACCESSING OUR SYSTEMS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS BELOW. WE RESERVE THE RIGHT TO ALTER, AMEND AND MODIFY THESE TERMS AND CONDITIONS AT OUR SOLE DISCRETION. ALL AMENDMENTS AND MODIFICATIONS WILL BE DULY NOTIFIED ON OUR SYSTEMS. IF YOU DO NOT AGREE TO THE TERMS AND CONDITIONS, WE REQUEST YOU NOT TO ACCESS THIS WEBSITE.\n\n"
              "3. USER ACCOUNT & SECURITY\n"
              "3.1. Any customer willing to use Our Systems may create an account by providing true, accurate and complete information as to name, address, email, and phone number.\n"
              "3.2. You will, at all times, be responsible for maintaining the confidentiality of Your user name and password and be responsible for all activities that occur in Your account.\n"
              "3.3. You agree that if You provide any information that is untrue, inaccurate or incomplete, You shall be solely responsible for the consequences thereof and We shall have the right to indefinitely suspend or terminate or block Your access on Our Systems.\n\n"
              "4. USER CONDUCT:\n"
              "By accessing Our Systems, You agree to:\n"
              "4.1. Use the Systems solely for lawful purposes and in full compliance with the Agreement, as well as applicable laws, regulations, and generally accepted professional standards.\n"
              "4.2. Not attempt to access the Systems using any methods other than those provided by Us.\n"
              "4.3. Not to engage in any activity that disrupts or interferes with the proper functioning of the Systems.\n"
              "4.4. Not attempt to copy or duplicate the information available on the Systems.\n"
              "4.5. Not impersonate any individual or entity, including Our employees or representatives.\n"
              "4.6. Not extract, compile, or misuse data from Our Systems.\n"
              "4.7. Not engage in fraudulent activities, including but not limited to fake payment verification, misuse of discounts, unauthorized returns, and excessive refund requests.\n\n"
              "5. PRODUCTS & SERVICES:\n"
              "5.1. The Company offers products and services as listed on Our Systems. While We strive for accuracy in product descriptions and pricing, We do not guarantee error-free listings.\n"
              "5.2. We reserve the right to modify, discontinue, or limit the availability of any product or service without prior notice.\n\n"
              "6. SHIPPING & DELIVERY:\n"
              "6.1. Estimated delivery times are provided for reference and are not guaranteed.\n"
              "6.2. Delays due to unforeseen circumstances, third-party logistics, or force majeure are not Our responsibility.\n\n"
              "7. RETURNS, REFUNDS & CANCELLATIONS:\n"
              "7.1. Returns, refunds, and cancellations are subject to Our Return & Refund Policy, available at www.brilldaddy.com/refund-policy.\n\n"
              "8. INTELLECTUAL PROPERTY RIGHTS:\n"
              "8.1. The domain name www.brilldaddy.com is controlled, owned and operated by Brilldaddy E-commerce Pvt. Ltd.\n"
              "8.2. All material on this site, including images, illustrations, audio clips, and video clips, are protected by copyrights, trademarks, and other intellectual property rights.\n\n"
              "9. COMMUNICATION:\n"
              "9.1. We may send You communication, notices or alerts from time to time. These alerts and communication will be sent automatically by Us to You.\n\n"
              "10. PAYMENTS:\n"
              "10.1. For customers within India, the prices stated for the Products are inclusive of GST and shipping charges.\n\n"
              "11. DISCLAIMER:\n"
              "11.1. THE CONTENT AND ALL SERVICES ASSOCIATED WITH OUR SYSTEMS ARE PROVIDED TO YOU ON AN “AS-IS” AND “AS AVAILABLE” BASIS.\n\n"
              "12. INDEMNITY AND LIMITATION OF LIABILITY:\n"
              "12.1. You shall defend, indemnify and hold harmless the Company and its officers, directors, shareholders, and employees.\n\n"
              "13. TERMINATION:\n"
              "13.1. This Agreement may be terminated as mentioned below.\n\n"
              "14. JURISDICTION AND GOVERNING LAW:\n"
              "14.1. This Agreement shall be governed by the laws of India. The courts in Bangalore shall have the sole jurisdiction.\n\n"
              "15. COUPONS, OFFERS AND EVENTS:\n"
              "15.1. Users may redeem Brilldaddy-issued vouchers for purchases of Brilldaddy brand Products on our Systems.\n\n"
              "16. OFFERS AND DISCOUNTS:\n"
              "16.1. Discounts and promotions apply only as specified at the time of purchase.\n\n"
              "17. EVENTS:\n"
              "17.1. Brilldaddy events are protected by relevant intellectual property laws.\n\n"
              "18. CONTACT US:\n"
              "18.1. For any queries regarding these Terms and Conditions, You may contact Us at:\n"
              "• Company Name: BRILLDADDY ECOMMERCE PVT. LTD\n"
              "• Customer Care Number: +91 9995124365\n"
              "• Email: contact@brilldaddy.com\n"
              "• Website: www.brilldaddy.com",
              textAlign: TextAlign.justify,
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text("Close", style: TextStyle(color: Colors.indigo)),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Text('Register',
            style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white)),
        backgroundColor: Colors.indigo,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Image.asset('assets/logo.png', height: 80),
              SizedBox(height: 20),
              Text(
                'Create Your Account',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.indigo,
                ),
              ),
              SizedBox(height: 10),
              Text(
                'Sign up with your details to get started.',
                style: TextStyle(fontSize: 16, color: Colors.grey[600]),
              ),
              SizedBox(height: 30),
              _buildTextField(
                label: 'Username',
                icon: Icons.person,
                onChanged: (value) => username = value,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Username is required.';
                  } else if (!RegExp(r'^[A-Za-z\s]+$').hasMatch(value)) {
                    return 'Username can only contain letters and spaces.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 15),
              _buildTextField(
                label: 'Email',
                icon: Icons.email,
                onChanged: (value) => email = value,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Email is required.';
                  } else if (!RegExp(
                          r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
                      .hasMatch(value)) {
                    return 'Enter a valid email.';
                  } else if (!value.toLowerCase().contains('@gmail')) {
                    return 'Only Gmail addresses are allowed.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 15),
              _buildTextField(
                label: 'Phone',
                icon: Icons.phone,
                keyboardType: TextInputType.phone,
                onChanged: (value) => phone = value,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Phone number is required.';
                  } else if (!RegExp(r'^\d{10}$').hasMatch(value)) {
                    return 'Phone number must be a 10-digit number.';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),

              /// **Terms and Conditions Checkbox**
              Row(
                children: [
                  Checkbox(
                    value: isTermsAccepted,
                    onChanged: (value) {
                      setState(() {
                        isTermsAccepted = value!;
                      });
                    },
                  ),
                  Expanded(
                    child: GestureDetector(
                      onTap: () => _showTermsAndConditions(context),
                      child: Text(
                        "I accept the Terms & Conditions",
                        style: TextStyle(
                          color: Colors.indigo,
                          decoration: TextDecoration.underline,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ],
              ),

              SizedBox(height: 20),
              SizedBox(
                width: MediaQuery.of(context).size.width * 0.9,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.indigo,
                    padding: EdgeInsets.symmetric(vertical: 15),
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12)),
                  ),
                  onPressed:
                      isSubmitting || !isTermsAccepted ? null : _handleSubmit,
                  child: isSubmitting
                      ? CircularProgressIndicator(color: Colors.white)
                      : Text('Register',
                          style: TextStyle(fontSize: 16, color: Colors.white)),
                ),
              ),
              SizedBox(height: 20),
              if (successMessage.isNotEmpty)
                Text(
                  successMessage,
                  style: TextStyle(
                      color: Colors.green, fontWeight: FontWeight.bold),
                ),
              if (errorMessage.isNotEmpty)
                Text(
                  errorMessage,
                  style:
                      TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
                ),
              SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text("Already have an account?",
                      style: TextStyle(fontSize: 16)),
                  GestureDetector(
                    onTap: () {
                      Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(
                              builder: (context) => LoginScreen()));
                    },
                    child: Text(
                      'Login',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.indigo,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required IconData icon,
    required Function(String) onChanged,
    String? Function(String?)? validator,
    TextInputType keyboardType = TextInputType.text,
  }) {
    return TextFormField(
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: Colors.indigo),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        filled: true,
        fillColor: Colors.grey[100],
      ),
      onChanged: onChanged,
      validator: validator,
      keyboardType: keyboardType,
    );
  }
}
